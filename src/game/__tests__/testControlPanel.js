// src/game/__tests__/testControlPanel.js
/**
 * Painel de Controle de Testes - Sales Game
 * 
 * Este arquivo fornece uma interface unificada para executar todos os testes
 * e valida√ß√µes do jogo de forma organizada e eficiente.
 */

import { runAllRegressionTests, testReportedIssues } from './regressionTests.js'
import { runAllIntegrationTests, createInteractiveSimulator } from './integrationTests.js'
import { 
  enableRealTimeValidation, 
  disableRealTimeValidation, 
  clearValidationLogs, 
  getValidationStats as getValidatorStats 
} from './realTimeValidator.js'

class TestControlPanel {
  constructor() {
    this.isRunning = false
    this.testResults = []
    this.validationEnabled = false
    this.simulator = null
  }

  // ====== EXECU√á√ÉO DE TESTES ======
  async runAllTests() {
    if (this.isRunning) {
      console.warn('‚ö†Ô∏è Testes j√° est√£o em execu√ß√£o!')
      return
    }

    this.isRunning = true
    console.group('üß™ EXECUTANDO SUITE COMPLETA DE TESTES')
    console.log('Iniciando valida√ß√£o completa do Sales Game...')
    
    const startTime = Date.now()
    this.testResults = []

    try {
      // 1. Testes Regressivos
      console.group('üìä 1. Testes Regressivos')
      const regressionStart = Date.now()
      runAllRegressionTests()
      const regressionTime = Date.now() - regressionStart
      this.testResults.push({ name: 'Regressivos', time: regressionTime, status: 'PASS' })
      console.log(`‚úÖ Testes regressivos conclu√≠dos em ${regressionTime}ms`)
      console.groupEnd()

      // 2. Testes de Integra√ß√£o
      console.group('üîó 2. Testes de Integra√ß√£o')
      const integrationStart = Date.now()
      runAllIntegrationTests()
      const integrationTime = Date.now() - integrationStart
      this.testResults.push({ name: 'Integra√ß√£o', time: integrationTime, status: 'PASS' })
      console.log(`‚úÖ Testes de integra√ß√£o conclu√≠dos em ${integrationTime}ms`)
      console.groupEnd()

      // 3. Testes de Problemas Reportados
      console.group('üêõ 3. Testes de Problemas Reportados')
      const issuesStart = Date.now()
      testReportedIssues()
      const issuesTime = Date.now() - issuesStart
      this.testResults.push({ name: 'Problemas Reportados', time: issuesTime, status: 'PASS' })
      console.log(`‚úÖ Testes de problemas reportados conclu√≠dos em ${issuesTime}ms`)
      console.groupEnd()

      const totalTime = Date.now() - startTime
      this.printSummary(totalTime)

    } catch (error) {
      console.error('‚ùå FALHA NA SUITE DE TESTES:', error)
      this.testResults.push({ name: 'Geral', time: 0, status: 'FAIL', error: error.message })
    } finally {
      this.isRunning = false
      console.groupEnd()
    }
  }

  // ====== VALIDA√á√ÉO EM TEMPO REAL ======
  enableRealTimeValidation() {
    enableRealTimeValidation()
    this.validationEnabled = true
    console.log('üîç Valida√ß√£o em tempo real ATIVADA')
  }

  disableRealTimeValidation() {
    disableRealTimeValidation()
    this.validationEnabled = false
    console.log('üîç Valida√ß√£o em tempo real DESATIVADA')
  }

  getValidationStats() {
    const stats = getValidatorStats()
    console.log('üìä Estat√≠sticas de Valida√ß√£o:', stats)
    return stats
  }

  clearValidationLogs() {
    clearValidationLogs()
    console.log('üßπ Logs de valida√ß√£o limpos')
  }

  // ====== SIMULADOR INTERATIVO ======
  createSimulator(playerCount = 2) {
    this.simulator = createInteractiveSimulator()
    this.simulator.start(playerCount)
    console.log('üéÆ Simulador interativo criado!')
    console.log('Use "testPanel.simulator" para acessar os comandos')
    return this.simulator
  }

  // ====== TESTES ESPEC√çFICOS ======
  testTurnPassing() {
    console.group('üîÑ Teste Espec√≠fico: Passagem de Turnos')
    
    const game = createInteractiveSimulator()
    game.start(2)
    
    // Simula passagem de turnos
    for (let i = 0; i < 6; i++) {
      const state = game.getGameState()
      const currentPlayer = state.players[state.turnIdx]
      console.log(`Turno ${i + 1}: ${currentPlayer.name} (√≠ndice ${state.turnIdx})`)
      game.nextTurn()
    }
    
    console.log('‚úÖ Teste de passagem de turnos conclu√≠do')
    console.groupEnd()
  }

  testBankruptcySystem() {
    console.group('üíÄ Teste Espec√≠fico: Sistema de Fal√™ncia')
    
    const game = createInteractiveSimulator()
    game.start(2)
    
    // Simula fal√™ncia do primeiro jogador
    const player1 = game.getGameState().players[0]
    game.declareBankruptcy(player1.id)
    
    const finalState = game.getGameState()
    console.assert(finalState.gameOver === true, 'Jogo deve terminar ap√≥s fal√™ncia')
    console.assert(finalState.winner !== null, 'Deve haver um vencedor')
    
    console.log('‚úÖ Teste de sistema de fal√™ncia conclu√≠do')
    console.groupEnd()
  }

  testResourceUpdates() {
    console.group('üìä Teste Espec√≠fico: Atualiza√ß√£o de Recursos')
    
    const game = createInteractiveSimulator()
    game.start(1)
    
    const player = game.getGameState().players[0]
    const initialStats = game.getPlayerStats(player.id)
    
    // Simula perda de clientes
    game.card(player.id, 'Rev√©s', { clientsDelta: -2 })
    
    const finalStats = game.getPlayerStats(player.id)
    console.assert(finalStats.clients < initialStats.clients, 'Clientes devem ter diminu√≠do')
    
    console.log('‚úÖ Teste de atualiza√ß√£o de recursos conclu√≠do')
    console.groupEnd()
  }

  testLevelRestrictions() {
    console.group('üìà Teste Espec√≠fico: Restri√ß√µes de N√≠vel')
    
    const game = createInteractiveSimulator()
    game.start(1)
    
    const player = game.getGameState().players[0]
    console.assert(player.erpLevel === 'D', 'N√≠vel ERP inicial deve ser D')
    console.assert(player.mixProdutos === 'D', 'N√≠vel Mix inicial deve ser D')
    
    console.log('‚úÖ Teste de restri√ß√µes de n√≠vel conclu√≠do')
    console.groupEnd()
  }

  // ====== RELAT√ìRIOS ======
  printSummary(totalTime) {
    console.group('üìã RESUMO DOS TESTES')
    console.log(`‚è±Ô∏è Tempo total: ${totalTime}ms`)
    console.log(`üìä Testes executados: ${this.testResults.length}`)
    
    const passed = this.testResults.filter(t => t.status === 'PASS').length
    const failed = this.testResults.filter(t => t.status === 'FAIL').length
    
    console.log(`‚úÖ Passou: ${passed}`)
    console.log(`‚ùå Falhou: ${failed}`)
    
    if (failed === 0) {
      console.log('üéâ TODOS OS TESTES PASSARAM! O jogo est√° funcionando perfeitamente.')
    } else {
      console.log('‚ö†Ô∏è Alguns testes falharam. Verifique os erros acima.')
    }
    
    console.groupEnd()
  }

  generateReport() {
    const report = {
      timestamp: new Date().toISOString(),
      totalTests: this.testResults.length,
      passed: this.testResults.filter(t => t.status === 'PASS').length,
      failed: this.testResults.filter(t => t.status === 'FAIL').length,
      results: this.testResults,
      validationEnabled: this.validationEnabled,
      simulatorActive: this.simulator !== null
    }
    
    console.log('üìÑ Relat√≥rio de Testes:', report)
    return report
  }

  // ====== UTILIT√ÅRIOS ======
  getStatus() {
    return {
      isRunning: this.isRunning,
      validationEnabled: this.validationEnabled,
      simulatorActive: this.simulator !== null,
      testResults: this.testResults
    }
  }

  reset() {
    this.isRunning = false
    this.testResults = []
    this.simulator = null
    console.log('üîÑ Painel de testes resetado')
  }
}

// ====== INST√ÇNCIA GLOBAL ======
const testControlPanel = new TestControlPanel()

// ====== FUN√á√ïES DE CONVENI√äNCIA ======
export const runAllTests = () => testControlPanel.runAllTests()
export const enableValidation = () => testControlPanel.enableRealTimeValidation()
export const disableValidation = () => testControlPanel.disableRealTimeValidation()
export const getValidationStats = () => testControlPanel.getValidationStats()
export const clearLogs = () => testControlPanel.clearValidationLogs()
export const createSimulator = (playerCount) => testControlPanel.createSimulator(playerCount)
export const testTurnPassing = () => testControlPanel.testTurnPassing()
export const testBankruptcySystem = () => testControlPanel.testBankruptcySystem()
export const testResourceUpdates = () => testControlPanel.testResourceUpdates()
export const testLevelRestrictions = () => testControlPanel.testLevelRestrictions()
export const generateReport = () => testControlPanel.generateReport()
export const getStatus = () => testControlPanel.getStatus()
export const reset = () => testControlPanel.reset()

// ====== AUTO-EXECU√á√ÉO ======
if (typeof window !== 'undefined') {
  // Disponibiliza globalmente para execu√ß√£o no console
  window.runAllTests = runAllTests
  window.enableValidation = enableValidation
  window.disableValidation = disableValidation
  window.getValidationStats = getValidationStats
  window.clearLogs = clearLogs
  window.createSimulator = createSimulator
  window.testTurnPassing = testTurnPassing
  window.testBankruptcySystem = testBankruptcySystem
  window.testResourceUpdates = testResourceUpdates
  window.testLevelRestrictions = testLevelRestrictions
  window.generateReport = generateReport
  window.getStatus = getStatus
  window.reset = reset
  window.testPanel = testControlPanel
  
  console.log('üéõÔ∏è Painel de Controle de Testes carregado!')
  console.log('Execute "runAllTests()" para rodar todos os testes')
  console.log('Execute "enableValidation()" para ativar valida√ß√£o em tempo real')
  console.log('Execute "createSimulator(2)" para criar um simulador interativo')
  console.log('Execute "testPanel.getStatus()" para ver o status atual')
}
