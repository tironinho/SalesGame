// src/game/__tests__/runCompleteTests.js
/**
 * Executor Completo de Testes - Sales Game
 * 
 * Este arquivo executa todos os testes e gera um relat√≥rio completo
 * para valida√ß√£o e documenta√ß√£o.
 */

import { 
  computeFaturamentoFor, 
  computeDespesasFor, 
  capacityAndAttendance,
  applyDeltas,
  countAlivePlayers,
  findNextAliveIdx,
  hasBlue,
  hasYellow,
  hasPurple,
  countManagerCerts,
  crossedTile
} from '../gameMath.js'

// ====== DADOS DE TESTE ======
const createTestPlayer = (overrides = {}) => ({
  id: 'test-player-1',
  name: 'Jogador Teste',
  cash: 18000,
  pos: 0,
  color: '#ffd54f',
  bens: 4000,
  clients: 1,
  vendedoresComuns: 1,
  fieldSales: 0,
  insideSales: 0,
  gestores: 0,
  gestoresComerciais: 0,
  managers: 0,
  erpLevel: 'D',
  mixProdutos: 'D',
  az: 0,
  am: 0,
  rox: 0,
  trainingsByVendor: {},
  onboarding: false,
  bankrupt: false,
  loanPending: null,
  ...overrides
})

// ====== EXECUTOR DE TESTES ======
export const runCompleteTestSuite = () => {
  const report = {
    timestamp: new Date().toISOString(),
    summary: {
      totalTests: 0,
      passed: 0,
      failed: 0,
      errors: []
    },
    results: []
  }

  console.log('üß™ INICIANDO SUITE COMPLETA DE TESTES - SALES GAME')
  console.log('=' .repeat(60))
  console.log(`üìÖ Data/Hora: ${new Date().toLocaleString()}`)
  console.log('')

  // ====== TESTE 1: C√ÅLCULOS B√ÅSICOS ======
  console.log('üìä TESTE 1: C√ÅLCULOS B√ÅSICOS')
  console.log('-' .repeat(40))
  
  try {
    const player = createTestPlayer()
    
    // Faturamento inicial
    const faturamento = computeFaturamentoFor(player)
    console.log(`‚úÖ Faturamento inicial: ${faturamento} (esperado: 770)`)
    report.results.push({
      test: 'Faturamento Inicial',
      expected: 770,
      actual: faturamento,
      status: faturamento === 770 ? 'PASS' : 'FAIL'
    })
    
    // Despesas iniciais
    const despesas = computeDespesasFor(player)
    console.log(`‚úÖ Despesas iniciais: ${despesas} (esperado: 1200)`)
    report.results.push({
      test: 'Despesas Iniciais',
      expected: 1200,
      actual: despesas,
      status: despesas === 1200 ? 'PASS' : 'FAIL'
    })
    
    // Capacidade e atendimento
    const { cap, inAtt } = capacityAndAttendance(player)
    console.log(`‚úÖ Capacidade: ${cap}, Atendimento: ${inAtt} (esperado: cap=2, att=1)`)
    report.results.push({
      test: 'Capacidade e Atendimento',
      expected: 'cap=2, att=1',
      actual: `cap=${cap}, att=${inAtt}`,
      status: cap === 2 && inAtt === 1 ? 'PASS' : 'FAIL'
    })
    
    console.log('‚úÖ TESTE 1: C√ÅLCULOS B√ÅSICOS - PASSOU')
    report.summary.passed += 3
    report.summary.totalTests += 3
    
  } catch (error) {
    console.log(`‚ùå TESTE 1: C√ÅLCULOS B√ÅSICOS - FALHOU: ${error.message}`)
    report.summary.failed += 3
    report.summary.totalTests += 3
    report.summary.errors.push(`C√°lculos B√°sicos: ${error.message}`)
  }
  
  console.log('')

  // ====== TESTE 2: MOVIMENTO E POSI√á√ÉO ======
  console.log('üö∂ TESTE 2: MOVIMENTO E POSI√á√ÉO')
  console.log('-' .repeat(40))
  
  try {
    // Movimento b√°sico
    const player = createTestPlayer({ pos: 0 })
    const newPos = (player.pos + 4) % 55
    console.log(`‚úÖ Movimento de 4 casas: posi√ß√£o ${newPos} (esperado: 4)`)
    report.results.push({
      test: 'Movimento B√°sico',
      expected: 4,
      actual: newPos,
      status: newPos === 4 ? 'PASS' : 'FAIL'
    })
    
    // Volta completa
    const playerAtEnd = createTestPlayer({ pos: 54 })
    const newPosAfterLap = (playerAtEnd.pos + 1) % 55
    console.log(`‚úÖ Volta completa: posi√ß√£o ${newPosAfterLap} (esperado: 0)`)
    report.results.push({
      test: 'Volta Completa',
      expected: 0,
      actual: newPosAfterLap,
      status: newPosAfterLap === 0 ? 'PASS' : 'FAIL'
    })
    
    // crossedTile
    const crossed = crossedTile(0, 4, 0)
    console.log(`‚úÖ Cruzou casa 0 (0‚Üí4): ${crossed} (esperado: false)`)
    report.results.push({
      test: 'Cruzou Casa 0 (0‚Üí4)',
      expected: false,
      actual: crossed,
      status: crossed === false ? 'PASS' : 'FAIL'
    })
    
    const crossedStart = crossedTile(54, 0, 0)
    console.log(`‚úÖ Cruzou casa 0 (54‚Üí0): ${crossedStart} (esperado: true)`)
    report.results.push({
      test: 'Cruzou Casa 0 (54‚Üí0)',
      expected: true,
      actual: crossedStart,
      status: crossedStart === true ? 'PASS' : 'FAIL'
    })
    
    console.log('‚úÖ TESTE 2: MOVIMENTO E POSI√á√ÉO - PASSOU')
    report.summary.passed += 4
    report.summary.totalTests += 4
    
  } catch (error) {
    console.log(`‚ùå TESTE 2: MOVIMENTO E POSI√á√ÉO - FALHOU: ${error.message}`)
    report.summary.failed += 4
    report.summary.totalTests += 4
    report.summary.errors.push(`Movimento e Posi√ß√£o: ${error.message}`)
  }
  
  console.log('')

  // ====== TESTE 3: CERTIFICADOS ======
  console.log('üèÜ TESTE 3: CERTIFICADOS')
  console.log('-' .repeat(40))
  
  try {
    // Certificados iniciais
    const player = createTestPlayer()
    console.log(`‚úÖ Certificado azul inicial: ${hasBlue(player)} (esperado: false)`)
    report.results.push({
      test: 'Certificado Azul Inicial',
      expected: false,
      actual: hasBlue(player),
      status: hasBlue(player) === false ? 'PASS' : 'FAIL'
    })
    
    console.log(`‚úÖ Certificado amarelo inicial: ${hasYellow(player)} (esperado: false)`)
    report.results.push({
      test: 'Certificado Amarelo Inicial',
      expected: false,
      actual: hasYellow(player),
      status: hasYellow(player) === false ? 'PASS' : 'FAIL'
    })
    
    console.log(`‚úÖ Certificado roxo inicial: ${hasPurple(player)} (esperado: false)`)
    report.results.push({
      test: 'Certificado Roxo Inicial',
      expected: false,
      actual: hasPurple(player),
      status: hasPurple(player) === false ? 'PASS' : 'FAIL'
    })
    
    // Adicionar certificados
    const playerWithCerts = { ...player, az: 1, am: 1, rox: 1 }
    console.log(`‚úÖ Certificado azul ap√≥s adicionar: ${hasBlue(playerWithCerts)} (esperado: true)`)
    report.results.push({
      test: 'Certificado Azul Ap√≥s Adicionar',
      expected: true,
      actual: hasBlue(playerWithCerts),
      status: hasBlue(playerWithCerts) === true ? 'PASS' : 'FAIL'
    })
    
    console.log(`‚úÖ Certificado amarelo ap√≥s adicionar: ${hasYellow(playerWithCerts)} (esperado: true)`)
    report.results.push({
      test: 'Certificado Amarelo Ap√≥s Adicionar',
      expected: true,
      actual: hasYellow(playerWithCerts),
      status: hasYellow(playerWithCerts) === true ? 'PASS' : 'FAIL'
    })
    
    console.log(`‚úÖ Certificado roxo ap√≥s adicionar: ${hasPurple(playerWithCerts)} (esperado: true)`)
    report.results.push({
      test: 'Certificado Roxo Ap√≥s Adicionar',
      expected: true,
      actual: hasPurple(playerWithCerts),
      status: hasPurple(playerWithCerts) === true ? 'PASS' : 'FAIL'
    })
    
    console.log('‚úÖ TESTE 3: CERTIFICADOS - PASSOU')
    report.summary.passed += 6
    report.summary.totalTests += 6
    
  } catch (error) {
    console.log(`‚ùå TESTE 3: CERTIFICADOS - FALHOU: ${error.message}`)
    report.summary.failed += 6
    report.summary.totalTests += 6
    report.summary.errors.push(`Certificados: ${error.message}`)
  }
  
  console.log('')

  // ====== TESTE 4: FAL√äNCIA ======
  console.log('üíÄ TESTE 4: SISTEMA DE FAL√äNCIA')
  console.log('-' .repeat(40))
  
  try {
    const players = [
      createTestPlayer({ id: 'p1', bankrupt: false }),
      createTestPlayer({ id: 'p2', bankrupt: true }),
      createTestPlayer({ id: 'p3', bankrupt: false })
    ]
    
    const aliveCount = countAlivePlayers(players)
    console.log(`‚úÖ Jogadores vivos: ${aliveCount} (esperado: 2)`)
    report.results.push({
      test: 'Contagem de Jogadores Vivos',
      expected: 2,
      actual: aliveCount,
      status: aliveCount === 2 ? 'PASS' : 'FAIL'
    })
    
    const nextAlive = findNextAliveIdx(players, 0)
    console.log(`‚úÖ Pr√≥ximo jogador vivo ap√≥s √≠ndice 0: ${nextAlive} (esperado: 2)`)
    report.results.push({
      test: 'Pr√≥ximo Jogador Vivo',
      expected: 2,
      actual: nextAlive,
      status: nextAlive === 2 ? 'PASS' : 'FAIL'
    })
    
    const allBankrupt = players.map(p => ({ ...p, bankrupt: true }))
    const allAliveCount = countAlivePlayers(allBankrupt)
    console.log(`‚úÖ Todos falidos: ${allAliveCount} vivos (esperado: 0)`)
    report.results.push({
      test: 'Todos os Jogadores Falidos',
      expected: 0,
      actual: allAliveCount,
      status: allAliveCount === 0 ? 'PASS' : 'FAIL'
    })
    
    console.log('‚úÖ TESTE 4: SISTEMA DE FAL√äNCIA - PASSOU')
    report.summary.passed += 3
    report.summary.totalTests += 3
    
  } catch (error) {
    console.log(`‚ùå TESTE 4: SISTEMA DE FAL√äNCIA - FALHOU: ${error.message}`)
    report.summary.failed += 3
    report.summary.totalTests += 3
    report.summary.errors.push(`Sistema de Fal√™ncia: ${error.message}`)
  }
  
  console.log('')

  // ====== TESTE 5: APLICA√á√ÉO DE DELTAS ======
  console.log('üìä TESTE 5: APLICA√á√ÉO DE DELTAS')
  console.log('-' .repeat(40))
  
  try {
    const player = createTestPlayer()
    
    // Delta de dinheiro
    const playerWithCash = applyDeltas(player, { cashDelta: 1000 })
    console.log(`‚úÖ Adicionar 1000: saldo ${playerWithCash.cash} (esperado: 19000)`)
    report.results.push({
      test: 'Delta de Dinheiro',
      expected: 19000,
      actual: playerWithCash.cash,
      status: playerWithCash.cash === 19000 ? 'PASS' : 'FAIL'
    })
    
    // Delta de clientes
    const playerWithClients = applyDeltas(player, { clientsDelta: 2 })
    console.log(`‚úÖ Adicionar 2 clientes: ${playerWithClients.clients} (esperado: 3)`)
    report.results.push({
      test: 'Delta de Clientes',
      expected: 3,
      actual: playerWithClients.clients,
      status: playerWithClients.clients === 3 ? 'PASS' : 'FAIL'
    })
    
    // Delta de vendedores
    const playerWithSellers = applyDeltas(player, { vendedoresComunsDelta: 1 })
    console.log(`‚úÖ Adicionar 1 vendedor: ${playerWithSellers.vendedoresComuns} (esperado: 2)`)
    report.results.push({
      test: 'Delta de Vendedores',
      expected: 2,
      actual: playerWithSellers.vendedoresComuns,
      status: playerWithSellers.vendedoresComuns === 2 ? 'PASS' : 'FAIL'
    })
    
    // M√∫ltiplos deltas
    const playerWithMultiple = applyDeltas(player, { 
      cashDelta: -500, 
      clientsDelta: 1, 
      vendedoresComunsDelta: 1 
    })
    console.log(`‚úÖ M√∫ltiplos deltas: cash=${playerWithMultiple.cash}, clients=${playerWithMultiple.clients}, vendedores=${playerWithMultiple.vendedoresComuns}`)
    console.log(`   Esperado: cash=17500, clients=2, vendedores=2`)
    report.results.push({
      test: 'M√∫ltiplos Deltas',
      expected: 'cash=17500, clients=2, vendedores=2',
      actual: `cash=${playerWithMultiple.cash}, clients=${playerWithMultiple.clients}, vendedores=${playerWithMultiple.vendedoresComuns}`,
      status: playerWithMultiple.cash === 17500 && playerWithMultiple.clients === 2 && playerWithMultiple.vendedoresComuns === 2 ? 'PASS' : 'FAIL'
    })
    
    console.log('‚úÖ TESTE 5: APLICA√á√ÉO DE DELTAS - PASSOU')
    report.summary.passed += 4
    report.summary.totalTests += 4
    
  } catch (error) {
    console.log(`‚ùå TESTE 5: APLICA√á√ÉO DE DELTAS - FALHOU: ${error.message}`)
    report.summary.failed += 4
    report.summary.totalTests += 4
    report.summary.errors.push(`Aplica√ß√£o de Deltas: ${error.message}`)
  }
  
  console.log('')

  // ====== TESTE 6: N√çVEIS ERP E MIX ======
  console.log('üìà TESTE 6: N√çVEIS ERP E MIX')
  console.log('-' .repeat(40))
  
  try {
    const player = createTestPlayer()
    console.log(`‚úÖ N√≠vel ERP inicial: ${player.erpLevel} (esperado: D)`)
    report.results.push({
      test: 'N√≠vel ERP Inicial',
      expected: 'D',
      actual: player.erpLevel,
      status: player.erpLevel === 'D' ? 'PASS' : 'FAIL'
    })
    
    console.log(`‚úÖ N√≠vel Mix inicial: ${player.mixProdutos} (esperado: D)`)
    report.results.push({
      test: 'N√≠vel Mix Inicial',
      expected: 'D',
      actual: player.mixProdutos,
      status: player.mixProdutos === 'D' ? 'PASS' : 'FAIL'
    })
    
    // Mudan√ßa de n√≠vel ERP
    const playerWithErpA = applyDeltas(player, { erpLevelSet: 'A' })
    console.log(`‚úÖ N√≠vel ERP ap√≥s mudan√ßa: ${playerWithErpA.erpLevel} (esperado: A)`)
    report.results.push({
      test: 'Mudan√ßa de N√≠vel ERP',
      expected: 'A',
      actual: playerWithErpA.erpLevel,
      status: playerWithErpA.erpLevel === 'A' ? 'PASS' : 'FAIL'
    })
    
    // Mudan√ßa de n√≠vel Mix
    const playerWithMixB = applyDeltas(player, { mixProdutosSet: 'B' })
    console.log(`‚úÖ N√≠vel Mix ap√≥s mudan√ßa: ${playerWithMixB.mixProdutos} (esperado: B)`)
    report.results.push({
      test: 'Mudan√ßa de N√≠vel Mix',
      expected: 'B',
      actual: playerWithMixB.mixProdutos,
      status: playerWithMixB.mixProdutos === 'B' ? 'PASS' : 'FAIL'
    })
    
    console.log('‚úÖ TESTE 6: N√çVEIS ERP E MIX - PASSOU')
    report.summary.passed += 4
    report.summary.totalTests += 4
    
  } catch (error) {
    console.log(`‚ùå TESTE 6: N√çVEIS ERP E MIX - FALHOU: ${error.message}`)
    report.summary.failed += 4
    report.summary.totalTests += 4
    report.summary.errors.push(`N√≠veis ERP e Mix: ${error.message}`)
  }
  
  console.log('')

  // ====== TESTE 7: TURNOS ======
  console.log('üîÑ TESTE 7: GERENCIAMENTO DE TURNOS')
  console.log('-' .repeat(40))
  
  try {
    const players = [
      createTestPlayer({ id: 'p1' }),
      createTestPlayer({ id: 'p2' }),
      createTestPlayer({ id: 'p3' })
    ]
    
    const nextTurn1 = findNextAliveIdx(players, 0)
    console.log(`‚úÖ Pr√≥ximo turno ap√≥s 0: ${nextTurn1} (esperado: 1)`)
    report.results.push({
      test: 'Pr√≥ximo Turno Normal',
      expected: 1,
      actual: nextTurn1,
      status: nextTurn1 === 1 ? 'PASS' : 'FAIL'
    })
    
    const playersWithBankrupt = [
      { ...players[0], bankrupt: false },
      { ...players[1], bankrupt: true },
      { ...players[2], bankrupt: false }
    ]
    const nextTurn2 = findNextAliveIdx(playersWithBankrupt, 0)
    console.log(`‚úÖ Pr√≥ximo turno com jogador falido: ${nextTurn2} (esperado: 2)`)
    report.results.push({
      test: 'Pr√≥ximo Turno com Falido',
      expected: 2,
      actual: nextTurn2,
      status: nextTurn2 === 2 ? 'PASS' : 'FAIL'
    })
    
    const nextTurn3 = findNextAliveIdx(players, 2)
    console.log(`‚úÖ Pr√≥ximo turno ap√≥s √∫ltimo: ${nextTurn3} (esperado: 0)`)
    report.results.push({
      test: 'Volta ao In√≠cio',
      expected: 0,
      actual: nextTurn3,
      status: nextTurn3 === 0 ? 'PASS' : 'FAIL'
    })
    
    console.log('‚úÖ TESTE 7: GERENCIAMENTO DE TURNOS - PASSOU')
    report.summary.passed += 3
    report.summary.totalTests += 3
    
  } catch (error) {
    console.log(`‚ùå TESTE 7: GERENCIAMENTO DE TURNOS - FALHOU: ${error.message}`)
    report.summary.failed += 3
    report.summary.totalTests += 3
    report.summary.errors.push(`Gerenciamento de Turnos: ${error.message}`)
  }
  
  console.log('')

  // ====== TESTE 8: REGRAS DE NEG√ìCIO ======
  console.log('üíº TESTE 8: REGRAS DE NEG√ìCIO')
  console.log('-' .repeat(40))
  
  try {
    // Saldo insuficiente
    const poorPlayer = createTestPlayer({ cash: 100 })
    const canPay = poorPlayer.cash >= 1000
    console.log(`‚úÖ Jogador com 100 pode pagar 1000: ${canPay} (esperado: false)`)
    report.results.push({
      test: 'Saldo Insuficiente',
      expected: false,
      actual: canPay,
      status: canPay === false ? 'PASS' : 'FAIL'
    })
    
    // Capacidade m√°xima
    const playerWithMaxCapacity = createTestPlayer({ 
      vendedoresComuns: 10, 
      fieldSales: 5, 
      insideSales: 3 
    })
    const { cap } = capacityAndAttendance(playerWithMaxCapacity)
    console.log(`‚úÖ Capacidade com muitos vendedores: ${cap} (esperado: > 0)`)
    report.results.push({
      test: 'Capacidade M√°xima',
      expected: '> 0',
      actual: cap,
      status: cap > 0 ? 'PASS' : 'FAIL'
    })
    
    // Empr√©stimo pendente
    const playerWithLoan = createTestPlayer({ 
      loanPending: { amount: 5000, dueRound: 2, charged: false }
    })
    console.log(`‚úÖ Empr√©stimo pendente: ${playerWithLoan.loanPending !== null} (esperado: true)`)
    report.results.push({
      test: 'Empr√©stimo Pendente',
      expected: true,
      actual: playerWithLoan.loanPending !== null,
      status: playerWithLoan.loanPending !== null ? 'PASS' : 'FAIL'
    })
    
    console.log('‚úÖ TESTE 8: REGRAS DE NEG√ìCIO - PASSOU')
    report.summary.passed += 3
    report.summary.totalTests += 3
    
  } catch (error) {
    console.log(`‚ùå TESTE 8: REGRAS DE NEG√ìCIO - FALHOU: ${error.message}`)
    report.summary.failed += 3
    report.summary.totalTests += 3
    report.summary.errors.push(`Regras de Neg√≥cio: ${error.message}`)
  }
  
  console.log('')

  // ====== TESTE 9: INTEGRA√á√ÉO ======
  console.log('üîó TESTE 9: INTEGRA√á√ÉO COMPLETA')
  console.log('-' .repeat(40))
  
  try {
    const gameState = {
      players: [
        createTestPlayer({ id: 'p1', name: 'Jogador 1' }),
        createTestPlayer({ id: 'p2', name: 'Jogador 2' })
      ],
      turnIdx: 0,
      round: 1,
      gameOver: false,
      winner: null
    }
    
    console.log(`‚úÖ Jogo com 2 jogadores: ${gameState.players.length} (esperado: 2)`)
    report.results.push({
      test: 'Jogo com 2 Jogadores',
      expected: 2,
      actual: gameState.players.length,
      status: gameState.players.length === 2 ? 'PASS' : 'FAIL'
    })
    
    console.log(`‚úÖ Turno inicial: ${gameState.turnIdx} (esperado: 0)`)
    report.results.push({
      test: 'Turno Inicial',
      expected: 0,
      actual: gameState.turnIdx,
      status: gameState.turnIdx === 0 ? 'PASS' : 'FAIL'
    })
    
    console.log(`‚úÖ Rodada inicial: ${gameState.round} (esperado: 1)`)
    report.results.push({
      test: 'Rodada Inicial',
      expected: 1,
      actual: gameState.round,
      status: gameState.round === 1 ? 'PASS' : 'FAIL'
    })
    
    console.log(`‚úÖ Jogo n√£o terminado: ${gameState.gameOver} (esperado: false)`)
    report.results.push({
      test: 'Jogo N√£o Terminado',
      expected: false,
      actual: gameState.gameOver,
      status: gameState.gameOver === false ? 'PASS' : 'FAIL'
    })
    
    // Simula√ß√£o de movimento
    const player1 = gameState.players[0]
    const newPos = (player1.pos + 6) % 55
    console.log(`‚úÖ Movimento simulado: posi√ß√£o ${newPos} (esperado: 6)`)
    report.results.push({
      test: 'Movimento Simulado',
      expected: 6,
      actual: newPos,
      status: newPos === 6 ? 'PASS' : 'FAIL'
    })
    
    // Simula√ß√£o de compra
    const purchaseCost = 2000
    const canAfford = player1.cash >= purchaseCost
    console.log(`‚úÖ Pode pagar compra: ${canAfford} (esperado: true)`)
    report.results.push({
      test: 'Pode Pagar Compra',
      expected: true,
      actual: canAfford,
      status: canAfford === true ? 'PASS' : 'FAIL'
    })
    
    console.log('‚úÖ TESTE 9: INTEGRA√á√ÉO COMPLETA - PASSOU')
    report.summary.passed += 6
    report.summary.totalTests += 6
    
  } catch (error) {
    console.log(`‚ùå TESTE 9: INTEGRA√á√ÉO COMPLETA - FALHOU: ${error.message}`)
    report.summary.failed += 6
    report.summary.totalTests += 6
    report.summary.errors.push(`Integra√ß√£o Completa: ${error.message}`)
  }
  
  console.log('')

  // ====== RELAT√ìRIO FINAL ======
  console.log('üìã RELAT√ìRIO FINAL')
  console.log('=' .repeat(60))
  console.log(`üìä Total de Testes: ${report.summary.totalTests}`)
  console.log(`‚úÖ Passou: ${report.summary.passed}`)
  console.log(`‚ùå Falhou: ${report.summary.failed}`)
  console.log(`üìà Taxa de Sucesso: ${((report.summary.passed / report.summary.totalTests) * 100).toFixed(1)}%`)
  
  if (report.summary.failed === 0) {
    console.log('üéâ TODOS OS TESTES PASSARAM! O jogo est√° funcionando perfeitamente.')
  } else {
    console.log('‚ö†Ô∏è Alguns testes falharam. Verifique os erros abaixo:')
    report.summary.errors.forEach((error, index) => {
      console.log(`   ${index + 1}. ${error}`)
    })
  }
  
  console.log('')
  console.log('üìÑ DETALHES DOS TESTES:')
  report.results.forEach((result, index) => {
    const status = result.status === 'PASS' ? '‚úÖ' : '‚ùå'
    console.log(`   ${index + 1}. ${status} ${result.test}`)
    console.log(`      Esperado: ${result.expected}`)
    console.log(`      Atual: ${result.actual}`)
    console.log('')
  })
  
  console.log('=' .repeat(60))
  console.log('üèÅ TESTES CONCLU√çDOS')
  
  return report
}

// ====== AUTO-EXECU√á√ÉO ======
if (typeof window !== 'undefined') {
  window.runCompleteTestSuite = runCompleteTestSuite
  console.log('üß™ Executor completo de testes carregado!')
  console.log('Execute "runCompleteTestSuite()" para rodar todos os testes')
}
